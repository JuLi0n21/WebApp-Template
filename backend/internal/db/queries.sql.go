// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT uuid, username, email FROM users WHERE uuid = $1
`

type GetUserByUUIDRow struct {
	Uuid     uuid.UUID `json:"uuid"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
}

func (q *Queries) GetUserByUUID(ctx context.Context, argUuid uuid.UUID) (GetUserByUUIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUUID, argUuid)
	var i GetUserByUUIDRow
	err := row.Scan(&i.Uuid, &i.Username, &i.Email)
	return i, err
}

const getUserByUsernameOrEmail = `-- name: GetUserByUsernameOrEmail :one
SELECT uuid, username, email, hashed_password
FROM users
WHERE username = $1 OR email = $1
LIMIT 1
`

func (q *Queries) GetUserByUsernameOrEmail(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameOrEmail, username)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO users (uuid, username, email, hashed_password)
VALUES ($1, $2, $3, $4)
ON CONFLICT (uuid) DO UPDATE SET
    username = EXCLUDED.username,
    email = EXCLUDED.email,
    hashed_password = EXCLUDED.hashed_password
`

type UpsertUserParams struct {
	Uuid           uuid.UUID `json:"uuid"`
	Username       string    `json:"username"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.db.ExecContext(ctx, upsertUser,
		arg.Uuid,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
	)
	return err
}
